/*************************************************************************
* 
*  Copyright (c) 2009, openvideoplayer.org
*  All rights reserved.
*  
*  Redistribution and use in source and binary forms, with or without 
*  modification, are permitted provided that the following conditions are 
*  met:
*  
*     * Redistributions of source code must retain the above copyright 
*  		notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above 
*  		copyright notice, this list of conditions and the following 
*  		disclaimer in the documentation and/or other materials provided 
*  		with the distribution.
*     * Neither the name of the openvideoplayer.org nor the names of its 
*  		contributors may be used to endorse or promote products derived 
*  		from this software without specific prior written permission.
*  
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
*  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
*  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
*  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
*  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**************************************************************************/
package org.openvideoplayer.netmocker
{
	import flash.events.NetStatusEvent;
	import flash.net.NetConnection;
	import flash.net.NetStream;
	
	import org.openvideoplayer.net.NetClient;
	
	/**
	 * A NetLoader which replaces the NetConnection and NetStream with mock
	 * objects which don't hit the network.
	 **/
	public class MockNetLoader extends TracingNetLoader
	{
		/**
		 * The client's expectation for how this loader's NetConnection will
		 * behave after connect() is called.
		 **/ 
		public function set netConnectionExpectation(value:NetConnectionExpectation):void
		{
			if (value != _netConnectionExpectation)
			{
				_netConnectionExpectation = value;
				
				if (mockNetConnection)
				{
					mockNetConnection.expectation = value;
				}
			}
		}
		
		public function get netConnectionExpectation():NetConnectionExpectation
		{
			return _netConnectionExpectation;
		}
		
		/**
		 * The expected duration of any mock NetStreams generated by this
		 * loader.
		 * 
		 * The expected duration will be returned in the onMetaData client
		 * callback.
		 **/
		public function set netStreamExpectedDuration(value:Number):void
		{
			_netStreamExpectedDuration = value;
		}
		
		public function get netStreamExpectedDuration():Number
		{
			return _netStreamExpectedDuration;
		}

		/**
		 * The expected width of any mock NetStreams generated by this
		 * loader.
		 * 
		 * The expected width will be returned in the onMetaData client
		 * callback.
		 **/
		public function set netStreamExpectedWidth(value:Number):void
		{
			_netStreamExpectedWidth = value;
		}
		
		public function get netStreamExpectedWidth():Number
		{
			return _netStreamExpectedWidth;
		}

		/**
		 * The expected height of any mock NetStreams generated by this
		 * loader.
		 * 
		 * The expected height will be returned in the onMetaData client
		 * callback.
		 **/
		public function set netStreamExpectedHeight(value:Number):void
		{
			_netStreamExpectedHeight = value;
		}
		
		public function get netStreamExpectedHeight():Number
		{
			return _netStreamExpectedHeight;
		}
		
	    /**
	     * @inheritDoc
	     **/
	    override protected function createNetConnection():NetConnection
	    {
			mockNetConnection = new MockNetConnection();
			mockNetConnection.expectation = netConnectionExpectation;
			//mockNetConnection.addEventListener(NetStatusEvent.NET_STATUS, onNetConnectionNetStatusEvent);
			return mockNetConnection;
	    }
	    
	    /**
	     * @inheritDoc
	     **/
	    override protected function createNetStream(connection:NetConnection):NetStream
	    {
			mockNetStream = new MockNetStream(connection);
			mockNetStream.client = new NetClient();
			mockNetStream.expectedDuration = _netStreamExpectedDuration;
			mockNetStream.expectedWidth = _netStreamExpectedWidth;
			mockNetStream.expectedHeight = _netStreamExpectedHeight;
			//mockNetStream.addEventListener(NetStatusEvent.NET_STATUS, onNetStreamNetStatusEvent);
			return mockNetStream;
	    }
	    
	    private var mockNetConnection:MockNetConnection = null;
	    private var _netConnectionExpectation:NetConnectionExpectation = NetConnectionExpectation.VALID_CONNECTION;
	    private var _netStreamExpectedDuration:Number = 0;
	    private var _netStreamExpectedWidth:Number = 0;
	    private var _netStreamExpectedHeight:Number = 0;
	    
	    private var mockNetStream:MockNetStream = null;
	}
}