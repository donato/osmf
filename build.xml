<?xml version="1.0" encoding="UTF-8"?>

<project name="OSMF" default="all" basedir=".">

	<property environment="env" />

	<!-- load external values -->
	<property file="${basedir}/build.properties" />
	
	<taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />
	<taskdef resource="flexUnitTasks.tasks" classpath="${FLEX_UNIT_HOME}/flexUnitTasks-4.1.0-8.jar" />
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${buildtools.dir}/libs/ant-contrib-1.0b3.jar" />

	<import file ="${buildtools.dir}/utils.xml"/>
	
	<!-- ========= main targets ========= -->

	<!-- main -->
	<target name="all">
		<antcall target="clean.bin" />
		<antcall target="init" />
		<antcall target="build" />
		<antcall target="run.tests" />
		<antcall target="dist" />
		<antcall target="source" />
	</target>

	<!-- build entire project -->
	<target name="build">
		<antcall target="compile.osmf" />
		<antcall target="compile.libs" />
		<antcall target="compile.smp" />
		<antcall target="compile.extended" />
		<antcall target="compile.zeri" />
		<antcall target="compile.tests" />
	</target>

	<!-- compile framework and compile and run framework tests -->
	<target name="core" depends="compile.core">
        <subant target="run" inheritall="true" antfile="framework/OSMFTest4Air/build.xml" buildpath="."/>
	</target>
	
	<!-- compile strobe media player and compile and run coresponding tests -->
	<target name="player">
		<antcall target="compile.player"/>
        <subant target="run" inheritall="true" antfile="player/StrobeMediaPlaybackTest/build.xml" buildpath="."/>
	</target>
	
	<!-- run all project available tests -->
	<target name="test">
		<antcall target="compile.tests" />
		<antcall target="run.tests" />
	</target>
	
	<!-- ========= subtargets ========= -->
	
	<!-- creates output dirs -->
	<target name="init">
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${smp.dist.dir}" />
	</target>
	
	<!-- compiles osmf framework -->
	<target name="compile.osmf">
		<subant target="" inheritall="true" antfile="framework/OSMF/build.xml" buildpath="."/>
	</target>
	
	<!-- compile strobe media player -->
	<target name="compile.smp">
		<subant target="" inheritall="true" antfile="player/Preloader/build.xml" buildpath="."/>
		<subant target="" inheritall="true" antfile="player/StrobeMediaPlayback/build.xml" buildpath="."/>
	</target>
	
	<target name="compile.core" depends="compile.osmf" >
        <subant target="build" inheritall="true" antfile="framework/OSMFTest4Air/build.xml" buildpath="."/>
	</target>	
	
	<target name="compile.player">
		<antcall target="compile.smp"/>
        <subant target="build" inheritall="true" antfile="player/StrobeMediaPlaybackTest/build.xml" buildpath="."/>
	</target>
	
	<!-- compiles libraries -->
	<!-- OBS. when adding a new libarary make sure you solve all the dependencies with other libraries -->
	<target name="compile.libs">
		<subant target="" inheritall="true">
			<fileset dir="." includes="*/VPAIDLibrary/build.xml" />
			<fileset dir="." includes="*/*Library/build.xml" excludes="*VPAID*"/>
			<fileset dir="." includes="testing/*Library/build.xml"/>
        </subant>
	</target>
	
	<!-- compile applications -->
	<target name="compile.extended">
		<antcall target="compile.plugins" />
		<antcall target="compile.samples" />
	</target>
	
	<target name="compile.plugins">
		<subant target="" inheritall="true">
			<fileset dir="." includes="*/*Plugin/build.xml"/>
        </subant>
	</target>
	
	<target name="compile.samples">
		<subant target="" inheritall="true">
			<fileset dir="." includes="*/*Sample/build.xml"/>
        </subant>
	</target>
	
	<!-- compile zeri certification -->
	<target name="compile.zeri">
		<subant target="" inheritall="true">
			<fileset dir="." includes="testing/certification/ZeriCertificationUtils/build.xml"/>
			<fileset dir="." includes="testing/certification/ZeriCertificationPlayer/build.xml"/>
			<!--<fileset dir="." includes="testing/certification/ZeriCertificationTest/build.xml"/>-->
        </subant>
	</target>
	
	<!-- compile tests -->
	<target name="compile.tests">
		<antcall target="compile.unittests" />
	</target>	
	
	<!-- compiles unittests -->
	<target name="compile.unittests">
		<subant target="build" inheritall="true">
			<fileset dir="." includes="*/*Test*/build.xml" excludes="buildtools"/>
        </subant>
	</target>
		
	<!-- run tests -->
	<target name="run.tests" depends="compile.tests">
		<antcall target="run.unittests" />
	</target>
	
	<!-- runs unit tests -->
	<target name="run.unittests" >
		<!--
		<subant target="run" inheritall="true">
			<fileset dir="." includes="*/*Test/build.xml"/>
		</subant>
		-->
		<subant target="run" inheritall="true" antfile="framework/OSMFTest4Air/build.xml" buildpath="."/>
		<subant target="run" inheritall="true" antfile="player/StrobeMediaPlaybackTest/build.xml" buildpath="."/>
		<!--<subant target="run" inheritall="true" antfile="testing/certification/ZeriCertificationTest/build.xml" buildpath="."/>-->
		<subant target="run" inheritall="true" antfile="testing/NetMockerTest/build.xml" buildpath="."/>
		<subant target="run" inheritall="true" antfile="samples/YouTubePluginTest/build.xml" buildpath="."/>		
	</target>
	
	<!-- creates distribuition for the entire porject -->
	<target name="dist">
		<antcall target="osmf.dist" />
		<antcall target="smp.dist" />
	</target>
	
	<target name="osmf.dist">
		<copy todir="${dist.dir}" overwrite="true" failonerror="false">
			<fileset dir="${basedir}" includes="/framework/OSMF/${output.bin}/**" />
			<fileset dir="${basedir}" includes="/**/*Sample*/${output.bin}/**" />
			<fileset dir="${basedir}" includes="/**/*Plugin*/${output.bin}/**" />
			<regexpmapper from="(.*)/${output.bin}/(.*)" to="\2" handledirsep="true"/>
			
		</copy>
		<copy todir="${dist.dir}/Test" overwrite="true" failonerror="false">
			<fileset dir="${basedir}" includes="/**/*Test*/${output.bin}/**" />
			<regexpmapper from="(.*)/${output.bin}/(.*)" to="\2" handledirsep="true"/>
		</copy>
		<copy todir="${dist.dir}/Zeri" overwrite="true" failonerror="false">
			<fileset dir="${basedir}" includes="/**/**/*Zeri*/${output.bin}/**" />
			<regexpmapper from="(.*)/${output.bin}/(.*)" to="\2" handledirsep="true"/>
		</copy>
	</target>

	<target name="smp.dist">
		<copy todir="${smp.dist.dir}" overwrite="true" failonerror="false">
			<fileset dir="${basedir}" includes="/player/**/${output.bin}/**" />
			<fileset dir="${basedir}" includes="/framework/OSMF/${output.bin}/**" />
			<fileset dir="${basedir}" includes="/**/YouTubePlugin/${output.bin}/**" />
			<fileset dir="${basedir}" includes="/**/YouTubePluginTest/${output.bin}/**" />
			<fileset dir="${basedir}" includes="/**/MASTPlugin/${output.bin}/**" />
			<regexpmapper from="(.*)/${output.bin}/(.*)" to="\2" handledirsep="true"/>
		</copy>
	</target>
	
	<target name="source">
		<zip destfile="${dist.dir}/OSMF_src.zip">
			<zipfileset dir="${basedir}" prefix="OSMF" excludes="dist/**, build/**, **/bin/**, **/bin-*/**, **/generated/**, **/buildtools/**" />
		</zip>
	</target>
  
	<!-- deletes the output directories -->
	<target name="clean">
		<sequential>
			<delete includeemptydirs="true" quiet="true">
				<fileset dir="${basedir}"  defaultexcludes="false">
				   <include name="framework/**/bin/**" />
				   <include name="player/**/bin/**" />
				   <include name="samples/**/bin/**" />
				   <include name="testing/**/bin/**" />
				   <include name="**/bin-*/**" />
				   <include name="**/generated/**" />
				   <include name="**/*Test*/test-reports/**" />
				   <exclude name="buildtools/**" />
				</fileset>
			</delete>
			<delete includeemptydirs="true" quiet="true">
				<fileset dir="${dist.dir}" />
				<fileset dir="${smp.dist.dir}" />
				<fileset dir="${reports.dir}" />
			</delete>
		</sequential>
	</target>
	
	<!-- deletes the content of the output directories -->
	<target name="clean.bin">
		<sequential>
			<delete includeemptydirs="true" quiet="true">
				<fileset dir="${basedir}"  defaultexcludes="false">
				   <include name="framework/**/bin/**/*" />
				   <include name="player/**/bin/**/*" />
				   <include name="samples/**/bin/**/*" />
				   <include name="testing/**/bin/**/*" />
				   <include name="**/bin-*/**/*" />
				   <include name="**/generated/**" />
				</fileset>
			</delete>
		</sequential>
	</target>
</project>
