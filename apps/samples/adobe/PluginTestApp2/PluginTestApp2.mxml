<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
	xmlns:players="com.adobe.strobe.players.*"
	creationComplete="onComplete(event)">


	<mx:Script>
		<![CDATA[
			import org.openvideoplayer.plugins.composition.CompositionPluginInfo;
		
			import mx.events.SliderEvent;
			import mx.controls.Alert;
			
			import flash.utils.getDefinitionByName;
			import flash.net.getClassByAlias;
			

			import org.openvideoplayer.plugin.PluginClassResource;
			import org.openvideoplayer.plugin.PluginFactory;
			import org.openvideoplayer.plugins.audio.SimpleAudioPluginInfo;
			import org.openvideoplayer.plugins.video.SimpleVideoPluginInfo;
			import org.openvideoplayer.plugins.image.SimpleImagePluginInfo;
			import org.openvideoplayer.plugins.multipleMediaInfo.VideoImagePluginInfo;
			import org.openvideoplayer.traits.MediaTraitType;
			import org.openvideoplayer.events.LoadableStateChangeEvent;

			import org.openvideoplayer.media.MediaInfo;
			import org.openvideoplayer.media.MediaFactory;
			import org.openvideoplayer.events.LoaderEvent;
			import org.openvideoplayer.traits.LoadState;
			import org.openvideoplayer.events.MediaPlayerStateChangeEvent;
			import org.openvideoplayer.media.MediaElement;
			import org.openvideoplayer.media.IMediaResource;
			import org.openvideoplayer.plugin.PluginClassResource;
			import org.openvideoplayer.plugin.PluginFactory;
			
			import org.openvideoplayer.net.NetLoader;
			import org.openvideoplayer.traits.ILoadable;
			import org.openvideoplayer.traits.MediaTraitType;			
			import org.openvideoplayer.image.ImageLoader;
			import org.openvideoplayer.image.ImageElement;
			import org.openvideoplayer.media.URLResource;			
			import org.openvideoplayer.video.VideoElement;
			import org.openvideoplayer.audio.AudioElement;
			import org.openvideoplayer.media.IURLResource;
			
			private function onComplete(event:Event):void
			{	
				var v:SimpleVideoPluginInfo;
				var a:SimpleAudioPluginInfo;
				var i:SimpleImagePluginInfo;
				var m:VideoImagePluginInfo;	
				var c:CompositionPluginInfo;						
				init();
			}
			
			
			private function init():void
			{
				mediaFactory = new MediaFactory();
				pluginFactory = new PluginFactory(mediaFactory);
				//registerDefaultMediaTypes();
			}
			
			/*
			  This is only when directly using the framework mediaElement loaded into mediaInfo.
			*/
			private function registerDefaultMediaTypes():void
			{
				var netLoader:NetLoader = new NetLoader();
				var videoMediaInfo:MediaInfo = new MediaInfo("org.openvideoplayer.video.Video", netLoader, VideoElement, new Array(netLoader));
				
				var audioMediaInfo:MediaInfo =  new MediaInfo("org.openvideoplayer.audio.Audio", netLoader, AudioElement, new Array(netLoader));
				
				
				var imgLoader:ImageLoader = new ImageLoader();
				var imgMediaInfo:MediaInfo = new MediaInfo("org.openvideoplayer.image.Image", imgLoader, ImageElement, new Array(imgLoader));
				
				mediaFactory.addMediaInfo(videoMediaInfo);
				mediaFactory.addMediaInfo(imgMediaInfo);
				mediaFactory.addMediaInfo(audioMediaInfo);
			}
		
			//Now mediafactory createElement doesn't distinguish specific mediaElement by url so if url is video specifc, create a videoElement explicitly.	
			private function videoHandleResource(urlResource:IURLResource):Boolean
			{
				var result:Boolean = false;
				
				if (urlResource != null && urlResource.url)
				{
					var url:String = urlResource.url.toLocaleLowerCase();
						
					if (url.lastIndexOf(".flv") == (url.length - 4)  || url.lastIndexOf(".mov") == (url.length - 4))
					{
						result = true;
					}
				}
				
				return result;
			}
			
			private function loadItem(url:String):void
			{	
				var mediaElement:MediaElement;
				var urlResource:IURLResource = new URLResource(url);
				
				if(videoHandleResource(urlResource))
				{
					//Vidoe Element takes url as param. Other MediaType doesn't need to.
					mediaElement = new VideoElement(new NetLoader(), urlResource);
				}	
				else
				{
					mediaElement = mediaFactory.createMediaElement(urlResource);
				}

				if (mediaElement == null)
				{
					Alert.show("No registered MediaInfo for this resource");
				}
				else
				{
					wrapper.source = mediaElement;
					wrapper.stretchToFit = false;
					wrapper.maintainAspectRatio = true;
					wrapper.autoPlay = true;
				}
			}
			
			
			private function loadPlugin(source:String):void
			{
				var pluginResource:IMediaResource;
				if (source.substr(0, 4) == "http" || source.substr(0, 4) == "file")
				{
					// this is a URL
					// Create a URLResource
					pluginResource = new URLResource(source);
				}
				else
				{
					// Assume this is a class
					var pluginInfoRef:Class = flash.utils.getDefinitionByName(source) as Class;
					pluginResource = new PluginClassResource(pluginInfoRef);
				}
				
				loadPluginFromResource(pluginResource);			
			}
			
			private function loadPluginFromResource(pluginResource:IMediaResource):void
			{
				// get the right plugin element from plugin factory
				pluginElement = pluginFactory.createMediaElement(pluginResource);
				if (pluginElement != null && pluginElement.hasTrait(MediaTraitType.LOADABLE))
				{
					loadable = pluginElement.getTrait(MediaTraitType.LOADABLE) as ILoadable;
					loadable.addEventListener(LoadableStateChangeEvent.LOADABLE_STATE_CHANGE, onLoadableStateChange);
					loadable.load();
				}
			}
			
			private function onLoadableStateChange(event:LoadableStateChangeEvent):void
			{
				if (event.newState == LoadState.LOADED)
				{
					trace("Plugin Loaded Successfully");
					pluginLoadState.text = "LOADED";
					pluginLoadState.visible = true;
				}
				else if (event.newState == LoadState.LOAD_FAILED)
				{
					trace("Plugin Loading Failed");
					pluginLoadState.text = "LOAD FAILED!";
					pluginLoadState.visible = true;

				}
			}
			
			private function staticPluginChanged(event:Event):void
			{
				var comboIndex:Number = event.currentTarget.selectedIndex;
				switch(comboIndex)
				{
					case 0:
						urlInput.text = STATICVIDEOPLUGIN;	
						mediaInput.text = RTMPVIDEO;
						break;
					case 1:
						urlInput.text = STATICAUDIOPLUGIN;
						mediaInput.text = HTTPAUDIO;
						break;
					case 2:
					   urlInput.text = STATICIMAGEPLUGIN;
					   mediaInput.text = HTTPIMAGE;
					   break;
					case 3:
					   urlInput.text = STATICMULTIINFOPLUGIN;
					   mediaInput.text = HTTPIMAGE;
					   break;					   	   
					default:
						urlInput.text = STATICVIDEOPLUGIN;
				}

			}
			
			private function dynamicPluginChanged(event:Event):void
			{
				var comboIndex:Number = event.currentTarget.selectedIndex;
				switch(comboIndex)
				{
					case 0:
						urlInput.text = DYNAMICSMILPLUGIN;	
						mediaInput.text = SMIL;
						statement.text = "This is SMIL PLUGIN. Currently the smil plugin based on SerialElement for composition.\n ImageElement may not be inlcuded in Sprint2.";
						break;
					case 1:
						urlInput.text = DYNAMICGENERICVIDEOPLUGIN;
						mediaInput.text = HTTPVIDEO;
						break;
					case 2:
					   urlInput.text = DYNMAICCUSTOMVIDEOPLUGIN;
					   mediaInput.text = HTTPVIDEO;
					   statement.text = "This custom plugic displays with alpha setting (0.2) and loads video only from flipside.\n Try with other domain video url.";
					   break;
					default:
						urlInput.text = DYNAMICSMILPLUGIN;
						mediaInput.text = HTTPIMAGE;
				}

			}			
	
			private var mediaFactory:MediaFactory;
			private var pluginFactory:PluginFactory;
			private var pluginElement:MediaElement;
			private var loadable:ILoadable;
			
			private static var STATICVIDEOPLUGIN:String = "org.openvideoplayer.plugins.video.SimpleVideoPluginInfo";
			private static var STATICAUDIOPLUGIN:String = "org.openvideoplayer.plugins.audio.SimpleAudioPluginInfo";
			private static var STATICIMAGEPLUGIN:String = "org.openvideoplayer.plugins.image.SimpleImagePluginInfo";
			private static var STATICMULTIINFOPLUGIN:String = "org.openvideoplayer.plugins.multipleMediaInfo.VideoImagePluginInfo";
			
			private static var DYNAMICSMILPLUGIN:String = "http://flipside.corp.adobe.com/strobe/plugins/ASPlugin.swf";
			private static var DYNAMICGENERICVIDEOPLUGIN:String = "http://flipside.corp.adobe.com/strobe/plugins/GenericVideoPlugin.swf";
			private static var DYNMAICCUSTOMVIDEOPLUGIN:String = "http://flipside.corp.adobe.com/strobe/plugins/CustomVideoPlugin.swf";
			
			private static var RTMPVIDEO:String = "rtmp://flipside.corp.adobe.com/Reno911_D6/Reno911-112_terry.flv";
			private static var HTTPVIDEO:String = "http://flipside.corp.adobe.com/test_assets/Performance/golden_compass-tlr2_h720p.mov";
			private static var HTTPAUDIO:String = "http://flipside.corp.adobe.com/test_assets/sounds/mp3/Batman_Superman_Adventures.mp3";
			private static var HTTPIMAGE:String = "http://flipside.corp.adobe.com/test_assets/images/bg-giraffe.jpg";
			private static var SMIL:String = "http://flipside.corp.adobe.com/strobe/plugins/smil.smi";			
		]]>
	</mx:Script>


	<mx:VBox height="100%" width="100%">
		
		<mx:Spacer height="10" />
		<mx:HBox height="60">
			<mx:Spacer width="10" />

			<mx:TextInput
				width="500"
				id="urlInput"
				text="org.openvideoplayer.plugins.video.SimpleVideoPluginInfo"
			/>
			<mx:Label text="Static Plugin" />
			<mx:ComboBox id="staticpluginCombox" change="staticPluginChanged(event)">
				<mx:ArrayCollection>
					<mx:Array>
						<mx:String>SimpleVideo</mx:String>
						<mx:String>SimpleAudio</mx:String>
						<mx:String>SimpleImage</mx:String>
						<mx:String>MultiInfo(Video/Image)</mx:String>						
					</mx:Array>	
				</mx:ArrayCollection>
			</mx:ComboBox>
			
			<mx:Label text="Dynamic Plugin" />
			<mx:ComboBox id="dynaicpluginCombox" change="dynamicPluginChanged(event);">
				<mx:ArrayCollection>
					<mx:Array>
						<mx:String>SMIL(SerialElement)</mx:String>
						<mx:String>GenericVideo</mx:String>
						<mx:String>CustomVideo</mx:String>
					</mx:Array>	
				</mx:ArrayCollection>
			</mx:ComboBox>

			<mx:Button label="Load Plugin" click="{loadPlugin(urlInput.text)}"/>
			
			<mx:Label id="pluginLoadState" text="" visible="false" />
			<mx:Text id="statement"/>

		</mx:HBox>	
		<mx:HBox height="60">
			<mx:Spacer width="10" />
			<mx:TextInput
				width="500"
				id="mediaInput"
				text="rtmp://flipside.corp.adobe.com/Reno911_D6/Reno911-112_terry.flv"
			/>
			<mx:Button label="Load Media Resource" click="{loadItem(mediaInput.text)}"/>

			<mx:Button label="Play" click="{wrapper.play()}"
				enabled="{wrapper.playable}" />
			<mx:Button label="Pause" click="{wrapper.pause()}"
				enabled="{wrapper.playable}"  />
			
		</mx:HBox>	

		<mx:Spacer height="5" />
		<mx:HBox height="100%" width="100%">
			<mx:Spacer width="10" />
		    <players:MediaPlayerWrapper 
				id="wrapper"
			    width="100%"
			    height="100%"
			/>
		</mx:HBox>
	</mx:VBox>
</mx:Application>
